// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.3

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type WechatUserHTTPServer interface {
	CreateWechatUser(context.Context, *CreateWechatUserRequest) (*CreateWechatUserReply, error)
	GetWechatUser(context.Context, *GetWechatUserRequest) (*GetWechatUserReply, error)
	ListWechatUser(context.Context, *ListWechatUserRequest) (*ListWechatUserReply, error)
}

func RegisterWechatUserHTTPServer(s *http.Server, srv WechatUserHTTPServer) {
	r := s.Route("/")
	r.POST("/api/user", _WechatUser_CreateWechatUser0_HTTP_Handler(srv))
	r.GET("/api/user/{id}", _WechatUser_GetWechatUser0_HTTP_Handler(srv))
	r.GET("/api/user", _WechatUser_ListWechatUser0_HTTP_Handler(srv))
}

func _WechatUser_CreateWechatUser0_HTTP_Handler(srv WechatUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateWechatUserRequest
		if err := ctx.Bind(&in.CreatBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sigma.v1.WechatUser/CreateWechatUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateWechatUser(ctx, req.(*CreateWechatUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateWechatUserReply)
		return ctx.Result(200, reply)
	}
}

func _WechatUser_GetWechatUser0_HTTP_Handler(srv WechatUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetWechatUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sigma.v1.WechatUser/GetWechatUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetWechatUser(ctx, req.(*GetWechatUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetWechatUserReply)
		return ctx.Result(200, reply)
	}
}

func _WechatUser_ListWechatUser0_HTTP_Handler(srv WechatUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListWechatUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sigma.v1.WechatUser/ListWechatUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListWechatUser(ctx, req.(*ListWechatUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListWechatUserReply)
		return ctx.Result(200, reply)
	}
}

type WechatUserHTTPClient interface {
	CreateWechatUser(ctx context.Context, req *CreateWechatUserRequest, opts ...http.CallOption) (rsp *CreateWechatUserReply, err error)
	GetWechatUser(ctx context.Context, req *GetWechatUserRequest, opts ...http.CallOption) (rsp *GetWechatUserReply, err error)
	ListWechatUser(ctx context.Context, req *ListWechatUserRequest, opts ...http.CallOption) (rsp *ListWechatUserReply, err error)
}

type WechatUserHTTPClientImpl struct {
	cc *http.Client
}

func NewWechatUserHTTPClient(client *http.Client) WechatUserHTTPClient {
	return &WechatUserHTTPClientImpl{client}
}

func (c *WechatUserHTTPClientImpl) CreateWechatUser(ctx context.Context, in *CreateWechatUserRequest, opts ...http.CallOption) (*CreateWechatUserReply, error) {
	var out CreateWechatUserReply
	pattern := "/api/user"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.sigma.v1.WechatUser/CreateWechatUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.CreatBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WechatUserHTTPClientImpl) GetWechatUser(ctx context.Context, in *GetWechatUserRequest, opts ...http.CallOption) (*GetWechatUserReply, error) {
	var out GetWechatUserReply
	pattern := "/api/user/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sigma.v1.WechatUser/GetWechatUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WechatUserHTTPClientImpl) ListWechatUser(ctx context.Context, in *ListWechatUserRequest, opts ...http.CallOption) (*ListWechatUserReply, error) {
	var out ListWechatUserReply
	pattern := "/api/user"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sigma.v1.WechatUser/ListWechatUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

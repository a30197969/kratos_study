// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AlbumClient is the client API for Album service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlbumClient interface {
	CreateAlbum(ctx context.Context, in *CreateAlbumRequest, opts ...grpc.CallOption) (*CreateAlbumReply, error)
	UpdateAlbum(ctx context.Context, in *UpdateAlbumRequest, opts ...grpc.CallOption) (*UpdateAlbumReply, error)
	DeleteAlbum(ctx context.Context, in *DeleteAlbumRequest, opts ...grpc.CallOption) (*DeleteAlbumReply, error)
	GetAlbum(ctx context.Context, in *GetAlbumRequest, opts ...grpc.CallOption) (*GetAlbumReply, error)
	ListAlbum(ctx context.Context, in *ListAlbumRequest, opts ...grpc.CallOption) (*ListAlbumReply, error)
}

type albumClient struct {
	cc grpc.ClientConnInterface
}

func NewAlbumClient(cc grpc.ClientConnInterface) AlbumClient {
	return &albumClient{cc}
}

func (c *albumClient) CreateAlbum(ctx context.Context, in *CreateAlbumRequest, opts ...grpc.CallOption) (*CreateAlbumReply, error) {
	out := new(CreateAlbumReply)
	err := c.cc.Invoke(ctx, "/api.sigma.v1.Album/CreateAlbum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumClient) UpdateAlbum(ctx context.Context, in *UpdateAlbumRequest, opts ...grpc.CallOption) (*UpdateAlbumReply, error) {
	out := new(UpdateAlbumReply)
	err := c.cc.Invoke(ctx, "/api.sigma.v1.Album/UpdateAlbum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumClient) DeleteAlbum(ctx context.Context, in *DeleteAlbumRequest, opts ...grpc.CallOption) (*DeleteAlbumReply, error) {
	out := new(DeleteAlbumReply)
	err := c.cc.Invoke(ctx, "/api.sigma.v1.Album/DeleteAlbum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumClient) GetAlbum(ctx context.Context, in *GetAlbumRequest, opts ...grpc.CallOption) (*GetAlbumReply, error) {
	out := new(GetAlbumReply)
	err := c.cc.Invoke(ctx, "/api.sigma.v1.Album/GetAlbum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumClient) ListAlbum(ctx context.Context, in *ListAlbumRequest, opts ...grpc.CallOption) (*ListAlbumReply, error) {
	out := new(ListAlbumReply)
	err := c.cc.Invoke(ctx, "/api.sigma.v1.Album/ListAlbum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlbumServer is the server API for Album service.
// All implementations must embed UnimplementedAlbumServer
// for forward compatibility
type AlbumServer interface {
	CreateAlbum(context.Context, *CreateAlbumRequest) (*CreateAlbumReply, error)
	UpdateAlbum(context.Context, *UpdateAlbumRequest) (*UpdateAlbumReply, error)
	DeleteAlbum(context.Context, *DeleteAlbumRequest) (*DeleteAlbumReply, error)
	GetAlbum(context.Context, *GetAlbumRequest) (*GetAlbumReply, error)
	ListAlbum(context.Context, *ListAlbumRequest) (*ListAlbumReply, error)
	mustEmbedUnimplementedAlbumServer()
}

// UnimplementedAlbumServer must be embedded to have forward compatible implementations.
type UnimplementedAlbumServer struct {
}

func (UnimplementedAlbumServer) CreateAlbum(context.Context, *CreateAlbumRequest) (*CreateAlbumReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlbum not implemented")
}
func (UnimplementedAlbumServer) UpdateAlbum(context.Context, *UpdateAlbumRequest) (*UpdateAlbumReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAlbum not implemented")
}
func (UnimplementedAlbumServer) DeleteAlbum(context.Context, *DeleteAlbumRequest) (*DeleteAlbumReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAlbum not implemented")
}
func (UnimplementedAlbumServer) GetAlbum(context.Context, *GetAlbumRequest) (*GetAlbumReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlbum not implemented")
}
func (UnimplementedAlbumServer) ListAlbum(context.Context, *ListAlbumRequest) (*ListAlbumReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAlbum not implemented")
}
func (UnimplementedAlbumServer) mustEmbedUnimplementedAlbumServer() {}

// UnsafeAlbumServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlbumServer will
// result in compilation errors.
type UnsafeAlbumServer interface {
	mustEmbedUnimplementedAlbumServer()
}

func RegisterAlbumServer(s grpc.ServiceRegistrar, srv AlbumServer) {
	s.RegisterService(&Album_ServiceDesc, srv)
}

func _Album_CreateAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServer).CreateAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sigma.v1.Album/CreateAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServer).CreateAlbum(ctx, req.(*CreateAlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Album_UpdateAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServer).UpdateAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sigma.v1.Album/UpdateAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServer).UpdateAlbum(ctx, req.(*UpdateAlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Album_DeleteAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServer).DeleteAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sigma.v1.Album/DeleteAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServer).DeleteAlbum(ctx, req.(*DeleteAlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Album_GetAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServer).GetAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sigma.v1.Album/GetAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServer).GetAlbum(ctx, req.(*GetAlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Album_ListAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServer).ListAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sigma.v1.Album/ListAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServer).ListAlbum(ctx, req.(*ListAlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Album_ServiceDesc is the grpc.ServiceDesc for Album service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Album_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.sigma.v1.Album",
	HandlerType: (*AlbumServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAlbum",
			Handler:    _Album_CreateAlbum_Handler,
		},
		{
			MethodName: "UpdateAlbum",
			Handler:    _Album_UpdateAlbum_Handler,
		},
		{
			MethodName: "DeleteAlbum",
			Handler:    _Album_DeleteAlbum_Handler,
		},
		{
			MethodName: "GetAlbum",
			Handler:    _Album_GetAlbum_Handler,
		},
		{
			MethodName: "ListAlbum",
			Handler:    _Album_ListAlbum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/sigma/v1/album.proto",
}
